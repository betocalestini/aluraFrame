{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,e,GAAS,CAAC,aAAD,C;AACTC,gB,GAAU,C;AACVC,e,GAAS,Y;AAEXC,mB,GAAa,I;AAEbC,c,GAAQ,I;;sCAECC,iB;AACV,yCAAc;AAAA;;AACX,qBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACF;;;;+CAEsB;AACpB,yBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,yBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,iCAAYI,eAAZ,GAA8B,UAACC,CAAD,EAAO;AAClCV,0CAAkBW,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACF,sBAFD;;AAIAR,iCAAYS,SAAZ,GAAwB,UAACJ,CAAD,EAAO;AAC5B,4BAAI,CAACZ,UAAL,EAAiB;AACdA,wCAAaY,EAAEE,MAAF,CAASC,MAAtB;AACAd,mCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,sCAAWC,KAAX,GAAmB,YAAY;AAC5B,oCAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACF,4BAFD;AAGF;AACDE,gCAAQL,UAAR;AACF,sBATD;;AAWAO,iCAAYW,OAAZ,GAAsB,UAACN,CAAD,EAAO;AAC1BO,gCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;;AAEAf,+BAAOM,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACF,sBAJD;AAKF,mBAvBM,CAAP;AAwBF;;;6CAEoBtB,U,EAAY;AAC9BH,yBAAO0B,OAAP,CAAe,UAACC,KAAD,EAAW;AACvB,yBAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiDxB,WAAW2B,iBAAX,CAA6BH,KAA7B;AACjDxB,gCAAW4B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACF,mBAHD;AAIF;;;iDAEwB;AACtB,sBAAI7B,UAAJ,EAAgB;AACbC;AACAD,kCAAa,IAAb;AACAC,6BAAQ,IAAR;AACF;AACH","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 4;\nconst dbName = 'aluraframe';\n\nlet connection = null;\n\nlet close = null;\n\nexport class ConnectionFactory {\n   constructor() {\n      throw new Error('Não é possível criar instâncias de ConnectionFactory');\n   }\n\n   static getConnection() {\n      return new Promise((resolve, reject) => {\n         let openRequest = window.indexedDB.open(dbName, version);\n\n         openRequest.onupgradeneeded = (e) => {\n            ConnectionFactory._createStores(e.target.result);\n         };\n\n         openRequest.onsuccess = (e) => {\n            if (!connection) {\n               connection = e.target.result;\n               close = connection.close.bind(connection);\n               connection.close = function () {\n                  throw new Error('Você não pode fechar diretamente a conexão');\n               };\n            }\n            resolve(connection);\n         };\n\n         openRequest.onerror = (e) => {\n            console.log(e.target.error);\n\n            reject(e.target.error.name);\n         };\n      });\n   }\n\n   static _createStores(connection) {\n      stores.forEach((store) => {\n         if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n         connection.createObjectStore(store, { autoIncrement: true });\n      });\n   }\n\n   static closeConnection() {\n      if (connection) {\n         close();\n         connection = null;\n         close = null;\n      }\n   }\n}\n"]}